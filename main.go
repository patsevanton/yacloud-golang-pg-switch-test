package main

import (
	"context"
	"log"
	"time"
// 	"fmt"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/jackc/pgx/v5/stdlib"
	"github.com/jmoiron/sqlx"
)

// https://github.com/jackc/pgx/issues/81#issuecomment-1422484059
// with a bit of dopiling
func main() {
	ctx := context.TODO()

	connString := "postgres://test:xxx@xxxx@c-xxxx.rw.mdb.yandexcloud.net:6432/testdb?" +
		"pool_max_conns=2&pool_min_conns=10&pool_max_conn_lifetime=1h" +
		"&pool_max_conn_idle_time=30m&default_query_exec_mode=simple_protocol"

	db, err := GetDB(ctx, connString)
	if err != nil {
		log.Fatal(err)
	}

	log.Println("Connected!!")

	if _, err := db.Exec(`create table if not exists test (
	   id bigint GENERATED BY DEFAULT AS IDENTITY primary key,
	   created_at timestamptz not null
	 )`); err != nil {
		log.Fatalf("unable to create table: %v\n", err)
	}

	for {
// 	    fmt.Println(db.Stats())
		if _, err := db.Exec(
			`insert into "test" ("created_at") values ($1)`, time.Now()); err != nil {
			log.Print(err)
			time.Sleep(1 * time.Second)

			continue
		}

		log.Print("successful ")
		time.Sleep(1 * time.Second)
	}
}

func GetDB(ctx context.Context, uri string) (*sqlx.DB, error) {
	DB, err := PgxCreateDB(ctx, uri)
	if err != nil {
		return nil, err
	}

	DB.SetMaxIdleConns(0)
	DB.SetMaxOpenConns(10)

	return DB, nil
}

func PgxCreateDB(ctx context.Context, uri string) (*sqlx.DB, error) {
	connConfig, _ := pgxpool.ParseConfig(uri)
	pool, err := pgxpool.NewWithConfig(ctx, connConfig)
	if err != nil {
		return nil, err
	}

	if err := pool.Ping(ctx); err != nil {
		return nil, err
	}

	pgxdb := stdlib.OpenDBFromPool(pool)
	return sqlx.NewDb(pgxdb, "pgx"), nil
}
